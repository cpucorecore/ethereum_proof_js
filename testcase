    //testcase in Rust
    #[test]
    fn simple_tx_res1() {
        testing_env!(get_context(vec![], false));

        let contract = EthProver::init("ethbridge".to_string());

        // Following data could be extracted by:
        // NODE_URL="https://mainnet.infura.io/v3/b5f870422ee5454fb11937e947154cd2" TX_HASH="0xb540248a9cca048c5861dec953d7a776bc1944319b9bd27a462469c8a437f4ff" EVENT_INDEX=0 node extract.js

        let log_index = 0;
        let receipt_index = 0;
        let header_data = Vec::from_hex("f90215a07b3677b7a9c7a10698a6626b7a563168d70d075b20dc4a34586f69d107215220a01dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d4934794037b539b0d6ae674c01cf5d9f84ea81b22532694a09fc4c68683db4aa2b60d4aa66ee87c4c62dd2ca97e4be40398f4b1135c511896a05bf56e745ff8705eb1f66747eaeda1ad215631b5ec84a9c4a5fd0f778cdc26f3a06d6b6ab9a687ab5fda5f81906af0407e5601c3730c4a10b34ddf46495996c514bbd64823b91837a1200825bf8845ffd524f9ad983010918846765746888676f312e31352e358664617277696ea01fb6eea3708aacac671c741e28215064b7553e78917c23e4bd8941b38efe0c16880bbf17bb8d9a3e9a").unwrap();
        let receipt_data = Vec::from_hex("f901bd01825bf8bf8b4f85894d389508032869c1701b9dbe3f5fc6df40c488bc7e1a02a056365f90644ba02872f61a1ad37613f47bba498327650b0b3ac40677e66c4a00000000000000000000000000000000000000000000000000000000000000064f85894d389508032869c1701b9dbe3f5fc6df40c488bc7e1a0f81f8171d13ab9fef6d56dec96341eba6a5265cec2002c22bbadc5f19d219720a00000000000000000000000000000000000000000000000000000000000000065").unwrap();
        let log_entry = Vec::from_hex("f85894d389508032869c1701b9dbe3f5fc6df40c488bc7e1a02a056365f90644ba02872f61a1ad37613f47bba498327650b0b3ac40677e66c4a00000000000000000000000000000000000000000000000000000000000000064").unwrap();
        let proof = vec![
        vec![
            Vec::from_hex("2080").unwrap(),
            Vec::from_hex("f901bd01825bf8bf8b4f85894d389508032869c1701b9dbe3f5fc6df40c488bc7e1a02a056365f90644ba02872f61a1ad37613f47bba498327650b0b3ac40677e66c4a00000000000000000000000000000000000000000000000000000000000000064f85894d389508032869c1701b9dbe3f5fc6df40c488bc7e1a0f81f8171d13ab9fef6d56dec96341eba6a5265cec2002c22bbadc5f19d219720a00000000000000000000000000000000000000000000000000000000000000065").unwrap(),
        ],
    ].iter().map(|node| {
        let mut stream = RlpStream::new();
        stream.begin_list(node.len());
        for item in node {
            stream.append(item);
        }
        stream.out()
    }).collect();

        if let PromiseOrValue::Value(true) = contract.verify_log_entry(
            log_index,
            log_entry,
            receipt_index,
            receipt_data,
            header_data,
            proof,
            true,
        ) {
        } else {
            panic!();
        }
    }